
name: MLOps CI/CD Pipeline - Build & Deploy

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'dataset/**'
      - 'requirements.txt'
  workflow_dispatch:

env:
  MLFLOW_TRACKING_URI: http://164.68.125.61:5001
  MLFLOW_S3_ENDPOINT_URL: http://164.68.125.61:9001
  AWS_ACCESS_KEY_ID: ${{ secrets.MINIO_USER }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.MINIO_PASSWORD }}
  BENTOML_HOME: /tmp/bentoml
  DOCKER_REPO_NAME: nikyta384
  MODEL_NAME: my-model
  MIN_ACCURACY: 0.8

jobs:
  train-and-register:
    runs-on: ubuntu-latest

    outputs:
      accuracy: ${{ steps.accuracy_check.outputs.accuracy }}
      run_id: ${{ steps.run_id.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preprocess data
        run: python src/preprocess.py

      - name: Run Training, Log to MLflow
        run: python src/train.py --commit ${{ github.sha }}

      - name: Check Training Result
        id: accuracy_check
        run: |
          ACC=$(cat output/accuracy.txt)
          echo "Accuracy = $ACC"
          echo "accuracy=$ACC" >> $GITHUB_OUTPUT
          #echo "accuracy=1.0" >> $GITHUB_OUTPUT


      - name: Check RUN_ID
        id: run_id
        run: |
          RD=$(cat output/run_id.txt)
          echo "id=$RD" >> $GITHUB_OUTPUT

      - name: Register in MLflow
        if: steps.accuracy_check.outputs.accuracy > $MIN_ACCURACY
        run: |
          python src/register_model.py \
            --commit ${{ github.sha }} \
            --run_id ${{ steps.run_id.outputs.id }}

  bentoml-deploy:
    needs: train-and-register
    runs-on: [self-hosted, linux]
    if: needs.train-and-register.outputs.accuracy > $MIN_ACCURACY

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Register with BentoML and create Docker image
        run: |
          python src/bentoml_register.py \
            --accuracy ${{ needs.train-and-register.outputs.accuracy }} \
            --commit ${{ github.sha }} \
            --run_id ${{ needs.train-and-register.outputs.run_id }} \
            --service_file service.py --docker_image_tag ${DOCKER_REPO_NAME}/${MODEL_NAME}:${{ github.sha }}
          bento_tag=${MODEL_NAME}:${{ github.sha }}
          bentoml containerize $bento_tag -t ${DOCKER_REPO_NAME}/${MODEL_NAME}:${{ github.sha }}

      - name: Push Docker image to registry
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push ${DOCKER_REPO_NAME}/${MODEL_NAME}:${{ github.sha }}

      - name: Deploy Docker image to remote host
        run: |
          IMAGE=${DOCKER_REPO_NAME}/${MODEL_NAME}:${{ github.sha }}

          if ! docker image inspect $IMAGE > /dev/null 2>&1; then
            echo "Image not found locally. Pulling from repository..."
            docker pull $IMAGE
          else
            echo "Image found locally. Skipping pull."
          fi

          docker stop ${MODEL_NAME} || true
          docker rm ${MODEL_NAME} || true
          docker run -d --name ${MODEL_NAME} -p 3001:3000 $IMAGE

          # Wait for container to be running
          echo "Waiting for container ${MODEL_NAME} to be running..."
          for i in {1..30}; do
            RUNNING=$(docker inspect --format='{{.State.Running}}' ${MODEL_NAME} 2>/dev/null || echo "false")
            if [ "$RUNNING" = "true" ]; then
              echo "Container is running."
              exit 0
            fi
            echo "Container not running yet... ($i)"
            sleep 2
          done

          echo "Container failed to start."
          docker logs ${MODEL_NAME}
          exit 1